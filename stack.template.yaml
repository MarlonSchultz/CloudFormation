AWSTemplateFormatVersion: '2010-09-09'
Description: 1 VPC in 2 AZ with 2 Subnets and 2 NATS
Parameters:
  DefaultRegion:
    Type: String
    Default: eu-central-1
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: MainVPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: DefaultRegion
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: DefaultRegion
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: DefaultRegion
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: DefaultRegion
  InternetGateWay:
    Type: AWS::EC2::InternetGateway
  InternetGateWayVPCConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'InternetGateWay'
      VpcId: !Ref 'VPC'
  ElasticIpOne:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  NATInPublicSubnetOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'ElasticIpOne.AllocationId'
      SubnetId: !Ref "PublicSubnetOne"
  ElasticIpTwo:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  NATInPublicSubnetTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'ElasticIpTwo.AllocationId'
      SubnetId: !Ref "PublicSubnetOne"

# EC2
  JumpHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-bf2ba8d0
      SubnetId: !Ref "PublicSubnetOne"
      InstanceType: t2.nano
      KeyName: MarlonAWS
      SecurityGroupIds:
      - !Ref SecurityGroupJumpHostSSH
  PrivateEc2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-bf2ba8d0
      SubnetId: !Ref "PrivateSubnetOne"
      InstanceType: t2.nano
      KeyName: MarlonAWS

# SecurityGroups

  SecurityGroupJumpHostSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gives all ips access to jumphost
      GroupName: SecurityGroupJumpHost
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

### Routing

# Routing - General

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateWay

# Routing - SubnetOne

  PublicSubnetOneRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref "PublicSubnetOne"
  PrivateRouteTableSubnetOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateSubnetOneRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTableSubnetOne'
      SubnetId: !Ref "PrivateSubnetOne"
  PrivateSubnetOneNatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATInPublicSubnetOne'
      RouteTableId: !Ref 'PrivateRouteTableSubnetOne'

# Routing - SubnetTwo

  PublicSubnetTwoRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref "PublicSubnetTwo"
  PrivateRouteTableSubnetTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateSubnetTwoRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTableSubnetTwo'
      SubnetId: !Ref "PrivateSubnetTwo"
  PrivateSubnetTwoNatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATInPublicSubnetTwo'
      RouteTableId: !Ref 'PrivateRouteTableSubnetTwo'
