AWSTemplateFormatVersion: '2010-09-09'
Description: 1 VPC in 2 AZ with 2 Subnets and 2 NATS
Parameters:
  DefaultRegion:
    Type: String
    Default: eu-central-1
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: MarlonAWS
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: MainVPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: DefaultRegion
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: DefaultRegion
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: DefaultRegion
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: DefaultRegion
  InternetGateWay:
    Type: AWS::EC2::InternetGateway
  InternetGateWayVPCConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'InternetGateWay'
      VpcId: !Ref 'VPC'
  ElasticIpOne:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  NATInPublicSubnetOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'ElasticIpOne.AllocationId'
      SubnetId: !Ref "PublicSubnetOne"
  ElasticIpTwo:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  NATInPublicSubnetTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'ElasticIpTwo.AllocationId'
      SubnetId: !Ref "PublicSubnetTwo"

# EC2
  JumpHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-bf2ba8d0
      SubnetId: !Ref "PublicSubnetOne"
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - !Ref SecurityGroupJumpHostSSH
#  PrivateEc2:
#    Type: AWS::EC2::Instance
#    Properties:
#      ImageId: ami-bf2ba8d0
#      SubnetId: !Ref "PrivateSubnetOne"
#      InstanceType: t2.nano
#      KeyName: MarlonAWS

# SecurityGroups

  SecurityGroupJumpHostSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gives all ips access to jumphost
      GroupName: SecurityGroupJumpHost
      VpcId: !Ref VPC

  # This security group defines who/where is allowed to access the ECS hosts directly.
  # By default we're just allowing access from the load balancer.  If you want to SSH
  # into the hosts, or expose non-load balanced services you can open their ports here.
  ECSHostSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          VpcId: !Ref VPC
          GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
          SecurityGroupIngress:
              # Only allow inbound access to ECS from the ELB
              - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
                IpProtocol: -1

  # This security group defines who/where is allowed to access the Application Load Balancer.
  # By default, we've opened this up to the public internet (0.0.0.0/0) but can you restrict
  # it further if you want.

  LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          VpcId: !Ref VPC
          GroupDescription: Access to the load balancer that sits in front of ECS
          SecurityGroupIngress:
              # Allow access from anywhere to our ECS services
              - CidrIp: 0.0.0.0/0
                IpProtocol: -1


  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SecurityGroupJumpHostSSH'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SecurityGroupJumpHostSSH'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0

### Routing

# Routing - General

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateWay

# Routing - SubnetOne

  PublicSubnetOneRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref "PublicSubnetOne"
  PrivateRouteTableSubnetOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateSubnetOneRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTableSubnetOne'
      SubnetId: !Ref "PrivateSubnetOne"
  PrivateSubnetOneNatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATInPublicSubnetOne'
      RouteTableId: !Ref 'PrivateRouteTableSubnetOne'

# Routing - SubnetTwo

  PublicSubnetTwoRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref "PublicSubnetTwo"
  PrivateRouteTableSubnetTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateSubnetTwoRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTableSubnetTwo'
      SubnetId: !Ref "PrivateSubnetTwo"
  PrivateSubnetTwoNatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATInPublicSubnetTwo'
      RouteTableId: !Ref 'PrivateRouteTableSubnetTwo'


# Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "TestCluster"

# ALB for Cluster
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB
      Scheme: internet-facing
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets:
      - !Ref PublicSubnetOne
      - !Ref PublicSubnetTwo

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
      -
        Type: forward
        TargetGroupArn: !Ref ALBTargetGroup

# Autoscale Launch Config
  AutoScaleLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-63cbae0c
      SecurityGroups:
      - Ref: ECSHostSecurityGroup
      InstanceType: t2.small
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ECSInstanceProfile
      UserData:
          "Fn::Base64": !Sub |
              #!/bin/bash
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              yum install -y aws-cfn-bootstrap
              echo ECS_CLUSTER=TestCluster >> /etc/ecs/ecs.config
              /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
              /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

  AutoscaleNginx:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName: !Ref "AutoScaleLaunchConfig"
      MinSize: "2"
      MaxSize: "2"
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo

# Tasks
  NginxTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        -
          Name: Nginx
          Image: "nginx"
          Cpu: "10"
          PortMappings:
            -
              ContainerPort: 80
              HostPort: 0
          Memory: "500"
          Essential: "true"

# Service
  TwoNginxService:
    Type: "AWS::ECS::Service"
    DependsOn:
    - ALBListener
    Properties:
      ServiceName: TwoNginx
      LaunchType: EC2
      Cluster: !Ref "Cluster"
      DesiredCount: 2
      TaskDefinition: !Ref NginxTask
      Role: !Ref ServiceRole
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: Nginx
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
# Roles

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
        RoleName: !Sub ecs-service-${AWS::StackName}
        Path: /
        AssumeRolePolicyDocument: |
            {
                "Statement": [{
                    "Effect": "Allow",
                    "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                    "Action": [ "sts:AssumeRole" ]
                }]
            }
        Policies:
            - PolicyName: !Sub ecs-service-${AWS::StackName}
              PolicyDocument:
                {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ec2:AuthorizeSecurityGroupIngress",
                                "ec2:Describe*",
                                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                "elasticloadbalancing:Describe*",
                                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                "elasticloadbalancing:DeregisterTargets",
                                "elasticloadbalancing:DescribeTargetGroups",
                                "elasticloadbalancing:DescribeTargetHealth",
                                "elasticloadbalancing:RegisterTargets"
                            ],
                            "Resource": "*"
                    }]
                }
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
        Path: /
        RoleName: !Sub ECSRole-${AWS::Region}
        AssumeRolePolicyDocument: |
            {
                "Statement": [{
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    }
                }]
            }
        Policies:
            - PolicyName: ecs-service
              PolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "ecs:CreateCluster",
                            "ecs:DeregisterContainerInstance",
                            "ecs:DiscoverPollEndpoint",
                            "ecs:Poll",
                            "ecs:RegisterContainerInstance",
                            "ecs:StartTelemetrySession",
                            "ecs:Submit*",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "ecr:BatchCheckLayerAvailability",
                            "ecr:BatchGetImage",
                            "ecr:GetDownloadUrlForLayer",
                            "ecr:GetAuthorizationToken",
                            "ssm:DescribeAssociation",
                            "ssm:GetDeployablePatchSnapshotForInstance",
                            "ssm:GetDocument",
                            "ssm:GetManifest",
                            "ssm:GetParameters",
                            "ssm:ListAssociations",
                            "ssm:ListInstanceAssociations",
                            "ssm:PutInventory",
                            "ssm:PutComplianceItems",
                            "ssm:PutConfigurePackageResult",
                            "ssm:UpdateAssociationStatus",
                            "ssm:UpdateInstanceAssociationStatus",
                            "ssm:UpdateInstanceInformation",
                            "ec2messages:AcknowledgeMessage",
                            "ec2messages:DeleteMessage",
                            "ec2messages:FailMessage",
                            "ec2messages:GetEndpoint",
                            "ec2messages:GetMessages",
                            "ec2messages:SendReply",
                            "cloudwatch:PutMetricData",
                            "ec2:DescribeInstanceStatus",
                            "ds:CreateComputer",
                            "ds:DescribeDirectories",
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:DescribeLogGroups",
                            "logs:DescribeLogStreams",
                            "logs:PutLogEvents",
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:AbortMultipartUpload",
                            "s3:ListMultipartUploadParts",
                            "s3:ListBucket",
                            "s3:ListBucketMultipartUploads"
                        ],
                        "Resource": "*"
                    }]
                }
  ECSInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
          Path: /
          Roles:
              - !Ref ECSRole